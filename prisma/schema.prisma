// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String   @unique
  email         String?          @unique
  emailVerified Boolean?
  password      String?  
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  
  createdAt     DateTime  @default(now())

  @@map("Users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())

  @@map("Sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("VerificationTokens")
}

model Chat {
  id       Int    @id @default(autoincrement())
  chatName String @default("Chat")
  userId   String
  owner    User   @relation(fields: [userId], references: [id])
  messages Message[]

  createdAt DateTime @default(now())

  @@index([userId], name: "user_chats")
  @@map("Chats")
}

model Message {
  id              Int    @default(autoincrement())
  chatId          Int
  chat            Chat   @relation(fields: [chatId], references: [id])
  sender          Sender
  content         String
  isVersionActive Boolean @default(true)
  version         Int @default(1)

  createdAt DateTime @default(now())  

  @@id([id, version], name: "msgID")
  @@index([chatId, isVersionActive], name: "active_messages")
  @@map("Messages")
}

enum Provider {
  Google
  Github
}

enum Sender {
  User
  AI
}